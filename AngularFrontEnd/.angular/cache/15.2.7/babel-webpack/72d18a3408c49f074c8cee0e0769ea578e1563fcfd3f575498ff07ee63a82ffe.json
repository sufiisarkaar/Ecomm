{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ContentComponent = class ContentComponent {\n  constructor(IS, userS, toaster) {\n    this.IS = IS;\n    this.userS = userS;\n    this.toaster = toaster;\n  }\n  ngOnInit() {\n    this.getItems();\n  }\n  getItems() {\n    this.IS.getItems().subscribe(res => {\n      this.itemList = res.Result;\n    });\n  }\n  AddToCart(item) {\n    // Call API to add item to cart if user is logged in\n    let user = localStorage.getItem(\"user\");\n    let user_id = user && JSON.parse(user).data.id;\n    let addData = {\n      ...item,\n      user_id\n    };\n    if (user) {\n      this.IS.addToCart(addData).subscribe(response => {\n        this.ActiveId = response.data.item_id;\n        this.cartData();\n        this.toaster.AddToCartSuccess();\n      }, err => {\n        this.toaster.AddToCartFail();\n      });\n    }\n    if (!localStorage.getItem(\"user\")) {\n      // Retrieve existing data from LocalStorage or create a new empty array\n      let existingData = JSON.parse(localStorage.getItem(\"MyItems\") || \"[]\");\n      // Add the new object to the existing array\n      existingData.push(item);\n      // Save the updated array to LocalStorage\n      localStorage.setItem(\"MyItems\", JSON.stringify(existingData));\n      this.IS.cardData.emit(existingData);\n      this.toaster.AddToCartSuccess();\n      this.IS.PendingdataAddedLocalToDb(item).subscribe(res => {\n        this.ActiveId = res.data.item_id;\n      });\n    }\n  }\n  cartData() {\n    let user = localStorage.getItem('user');\n    let userId = user && JSON.parse(user).data.id;\n    this.IS.getCartDataByUserID(userId).subscribe(res => {\n      this.IS.cardData.emit(res.data);\n    });\n  }\n};\nContentComponent = __decorate([Component({\n  selector: 'app-content',\n  templateUrl: './content.component.html',\n  styleUrls: ['./content.component.scss']\n})], ContentComponent);\nexport { ContentComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAU1C,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAK3BC,YAAoBC,EAAsB,EAAUC,KAAmB,EAAUC,OAAsB;IAAnF,OAAE,GAAFF,EAAE;IAA8B,UAAK,GAALC,KAAK;IAAwB,YAAO,GAAPC,OAAO;EAAmB;EAE3GC,QAAQ;IACN,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAA,QAAQ;IACN,IAAI,CAACJ,EAAE,CAACI,QAAQ,EAAE,CAACC,SAAS,CAAEC,GAAQ,IAAI;MACxC,IAAI,CAACC,QAAQ,GAAGD,GAAG,CAACE,MAAM;IAC5B,CAAC,CAAC;EACJ;EAGAC,SAAS,CAACC,IAAS;IACjB;IACA,IAAIC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACvC,IAAIC,OAAO,GAAGH,IAAI,IAAII,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,CAACM,IAAI,CAACC,EAAE;IAC9C,IAAIC,OAAO,GAAG;MACZ,GAAGT,IAAI;MACPI;KACD;IACD,IAAIH,IAAI,EAAE;MACR,IAAI,CAACX,EAAE,CAACoB,SAAS,CAACD,OAAO,CAAC,CAACd,SAAS,CAAEgB,QAAY,IAAI;QACpD,IAAI,CAACC,QAAQ,GAAGD,QAAQ,CAACJ,IAAI,CAACM,OAAO;QACrC,IAAI,CAACC,QAAQ,EAAE;QACf,IAAI,CAACtB,OAAO,CAACuB,gBAAgB,EAAE;MAEjC,CAAC,EAAEC,GAAG,IAAG;QACP,IAAI,CAACxB,OAAO,CAACyB,aAAa,EAAE;MAC9B,CAAC,CAAC;;IAEJ,IAAI,CAACf,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,EAAE;MACjC;MACA,IAAIe,YAAY,GAAQb,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,CAAa;MAEvF;MACAe,YAAY,CAACC,IAAI,CAACnB,IAAI,CAAC;MAEvB;MACAE,YAAY,CAACkB,OAAO,CAAC,SAAS,EAAEf,IAAI,CAACgB,SAAS,CAACH,YAAY,CAAC,CAAC;MAC7D,IAAI,CAAC5B,EAAE,CAACgC,QAAQ,CAACC,IAAI,CAACL,YAAY,CAAC;MACnC,IAAI,CAAC1B,OAAO,CAACuB,gBAAgB,EAAE;MAE/B,IAAI,CAACzB,EAAE,CAACkC,yBAAyB,CAACxB,IAAI,CAAC,CAACL,SAAS,CAAEC,GAAQ,IAAI;QAC7D,IAAI,CAACgB,QAAQ,GAAGhB,GAAG,CAACW,IAAI,CAACM,OAAO;MAElC,CAAC,CAAC;;EAEN;EAKAC,QAAQ;IACN,IAAIb,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACvC,IAAIsB,MAAM,GAAGxB,IAAI,IAAII,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,CAACM,IAAI,CAACC,EAAE;IAC7C,IAAI,CAAClB,EAAE,CAACoC,mBAAmB,CAACD,MAAM,CAAC,CAAC9B,SAAS,CAAEC,GAAQ,IAAI;MACzD,IAAI,CAACN,EAAE,CAACgC,QAAQ,CAACC,IAAI,CAAC3B,GAAG,CAACW,IAAI,CAAC;IACjC,CAAC,CAAC;EACJ;CAGD;AAnEYnB,gBAAgB,eAL5BD,SAAS,CAAC;EACTwC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWzC,gBAAgB,CAmE5B;SAnEYA,gBAAgB","names":["Component","ContentComponent","constructor","IS","userS","toaster","ngOnInit","getItems","subscribe","res","itemList","Result","AddToCart","item","user","localStorage","getItem","user_id","JSON","parse","data","id","addData","addToCart","response","ActiveId","item_id","cartData","AddToCartSuccess","err","AddToCartFail","existingData","push","setItem","stringify","cardData","emit","PendingdataAddedLocalToDb","userId","getCartDataByUserID","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\PILR\\Desktop\\AngularWithLaravelAPI\\AngularFrontEnd\\src\\app\\components\\content\\content.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ItemServiceService } from 'src/app/services/item-service.service';\nimport { ToasterService } from 'src/app/services/toaster.service';\nimport { UsersService } from 'src/app/services/users.service';\n\n@Component({\n  selector: 'app-content',\n  templateUrl: './content.component.html',\n  styleUrls: ['./content.component.scss']\n})\nexport class ContentComponent implements OnInit {\n\n  itemList: any;\n  IsLogin: any;\n  ActiveId : any;\n  constructor(private IS: ItemServiceService, private userS: UsersService, private toaster:ToasterService) { }\n\n  ngOnInit() {\n    this.getItems();\n  }\n\n  getItems() {\n    this.IS.getItems().subscribe((res: any) => {\n      this.itemList = res.Result;\n    })\n  }\n\n\n  AddToCart(item: any) {\n    // Call API to add item to cart if user is logged in\n    let user = localStorage.getItem(\"user\")\n    let user_id = user && JSON.parse(user).data.id;\n    let addData = {\n      ...item,\n      user_id\n    }\n    if (user) {\n      this.IS.addToCart(addData).subscribe((response:any) => {\n        this.ActiveId = response.data.item_id;\n        this.cartData();\n        this.toaster.AddToCartSuccess();\n\n      },(err)=>{\n        this.toaster.AddToCartFail();\n      });\n    }\n    if (!localStorage.getItem(\"user\")) {\n      // Retrieve existing data from LocalStorage or create a new empty array\n      let existingData: any = JSON.parse(localStorage.getItem(\"MyItems\") || \"[]\") as string[];\n\n      // Add the new object to the existing array\n      existingData.push(item);\n\n      // Save the updated array to LocalStorage\n      localStorage.setItem(\"MyItems\", JSON.stringify(existingData));\n      this.IS.cardData.emit(existingData)\n      this.toaster.AddToCartSuccess();\n\n      this.IS.PendingdataAddedLocalToDb(item).subscribe((res: any) => {\n        this.ActiveId = res.data.item_id;\n        \n      })\n    }\n  }\n\n\n\n\n  cartData() {\n    let user = localStorage.getItem('user');\n    let userId = user && JSON.parse(user).data.id;\n    this.IS.getCartDataByUserID(userId).subscribe((res: any) => {\n      this.IS.cardData.emit(res.data);\n    })\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}